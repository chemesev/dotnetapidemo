version: 2
jobs:
  build:
    working_directory: /dotnetapidemo
    docker:
      - image: microsoft/dotnet:sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - checkout
      - run: dotnet restore
      - run: dotnet ef database update
      - run: dotnet build      
      - run: dotnet publish -o out
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.05.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      # Integration Tests
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d
            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
            docker run --network container:dotnetapidemo \
              appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:5000/api/tasks
      - run:
          name: Integration Tests
          command: |
            set -x
            TAG=$CIRCLE_USERNAME/$CIRCLE_PROJECT_REPONAME:0.1.$CIRCLE_BUILD_NUM
            docker build -t $CIRCLE_PROJECT_REPONAME .
            chmod +x Automation/integration_tests.sh
            echo "Running Integration Tests..."
            ./Automation/integration_tests.sh

      # build and push Docker image
      - run:
          name: Build Docker Image
          command: |
            TAG=$CIRCLE_USERNAME/$CIRCLE_PROJECT_REPONAME:0.1.$CIRCLE_BUILD_NUM
            docker build -t $TAG .      
            docker login -e $DOCKER_USER -u $CIRCLE_USERNAME -p $DOCKER_PASS         
            docker push $TAG